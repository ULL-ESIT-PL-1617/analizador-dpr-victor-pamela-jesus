Esta es la gramática:

    1.  Σ = { ADDOP, MULTOP, '(', ')', NUM, ',', '=', ID, 'IF', 'ELSE', 'ELSEIF', 'THEN', BOOLEAN, 'WHILE', '{', '}'},
    1.  Σ = { 'COSA', ID, '=', 'HAZESTO', 'QUEDICES'
    2.  V = {  declaracion, expression, funcion, sentencia, bucle, condicion }
    Producciones:
        1.  declaracion → 'COSA' ID '=' (funcion | expression)
        2.  funcion → 'HAZESTO' '(' (expression)* ')' '{' (instruccion)* 
            '}'
        3.  instruccion → (declaracion | sentencia | bucle)
        3.  expression → 
        4.  sentencia → 'QUEDICES' (condicion) '{' (instruccion)* '}' ...
        5.  bucle → WHILE expression '{' expression '}'
        6.  condicion → 'IF' expression 'THEN' expression ('ELSEIF' expression 'THEN' expression)* 'ELSE' expression
        
Esta es la gramática:

    1.  Σ = { ADDOP, MULTOP, '(', ')', NUM, ',', '=', ID, 'IF', 'ELSE', 'ELSEIF', 'THEN', BOOLEAN, 'WHILE', '{', '}' }
    2.  V = {  declaracion, expression, funcion, sentencia, bucle, condicion, instruccion, term, factor, asignacion, llamada, comparacion }
    Producciones:
        1.  instruccion → (declaracion | expression) (; (declaracion | expression))*
        1.  declaracion → ('COSA' asignacion | funcion)
        2.  asignacion → ID '=' expression
        3.  funcion → ID = -> '(' (expression ','?)* ')' expression
        4.  llamada → ID '(' (expression ','?)* ')'
        5.  condicion → 'IF' expression 'THEN' expression ('ELSEIF' expression 'THEN' expression)* 'ELSE' expression
        6.  bucle → WHILE expression '{' expression '}'
        7.  expression → term (( ADDOP term)* comparacion? | asignacion | llamada)
        8.  comparacion → expression COMPARISONOPERATOR expression
        9.  term → factor (MULTOP factor)*
        10. factor → NUM | ID | BOOLEAN | '(' asignacion ')' | condicion | bucle
            
        